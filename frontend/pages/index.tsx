import Head from "next/head";
import { useEffect, useState } from "react";
import { ethers } from "ethers";
import abi from "../utils/WavePortal.json";
import { WaveInfo } from "../components/WaveInfo";

interface WaveInfo {
  address: string;
  timestamp: Date;
  message: string;
}

const getEthereumObject = () => window.ethereum;

const findMetaMaskAccount = async () => {
  try {
    const ethereum = getEthereumObject();

    if (!ethereum) {
      console.error("Make sure you have Metamask!");
      return null;
    }

    console.log("We have the Ethereum object", ethereum);
    const accounts = await ethereum.request({ method: "eth_accounts" });

    if (accounts.length !== 0) {
      const account = accounts[0];
      console.log("Found an authorized account:", account);
      return account;
    } else {
      console.error("No authorized account found");
      return null;
    }
  } catch (error) {
    console.error(error);
    return null;
  }
};

export default function Home() {
  const [currentAccount, setCurrentAccount] = useState("");
  const [allWaves, setAllWaves] = useState<WaveInfo[]>([]);
  const [message, setMessage] = useState("");
  const contractAddress = `${process.env.NEXT_PUBLIC_CONTRACT_ADDRESS}`;
  const contractABI = abi.abi;

  const connectWallet = async () => {
    try {
      const ethereum = getEthereumObject();
      if (!ethereum) {
        alert("Get MetaMask!");
        return;
      }

      const accounts = await ethereum.request({
        method: "eth_requestAccounts",
      });

      console.log("Connected", accounts[0]);
      setCurrentAccount(accounts[0]);
      getAllWaves();
    } catch (error) {
      console.error(error);
    }
  };

  const wave = async (message: string) => {
    try {
      const { ethereum } = window;

      if (ethereum) {
        const provider = new ethers.providers.Web3Provider(ethereum);
        const signer = provider.getSigner();
        const wavePortalContract = new ethers.Contract(
          contractAddress,
          contractABI,
          signer
        );

        let count = await wavePortalContract.getTotalWaves();
        console.log("Retrieved total wave count...", count.toNumber());

        const waveTxn = await wavePortalContract.wave(message);
        console.log("Mining...", waveTxn.hash);

        await waveTxn.wait();
        console.log("Mined -- ", waveTxn.hash);

        count = await wavePortalContract.getTotalWaves();
        console.log("Retrieved total wave count...", count.toNumber());

        getAllWaves();
      } else {
        console.log("Ethereum object doesn't exist!");
      }
    } catch (error) {
      console.log(error);
    }
  };

  const getAllWaves = async () => {
    try {
      const { ethereum } = window;
      if (ethereum) {
        const provider = new ethers.providers.Web3Provider(ethereum);
        const signer = provider.getSigner();
        const wavePortalContract = new ethers.Contract(
          contractAddress,
          contractABI,
          signer
        );
        const waves = await wavePortalContract.getAllWaves();

        const wavesCleaned: WaveInfo[] = [];
        waves.forEach(
          (wave: { waver: any; timestamp: number; message: string }) => {
            wavesCleaned.push({
              address: wave.waver,
              timestamp: new Date(wave.timestamp * 1000),
              message: wave.message,
            });
          }
        );

        setAllWaves(wavesCleaned);
      } else {
        console.log("Ethereum object doesn't exist!");
      }
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    async () => {
      const account = await findMetaMaskAccount();
      if (account !== null) {
        setCurrentAccount(account);
      }
    };
  }, []);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className="container py-20 flex flex-col items-center">
          <div className="text-center flex flex-col items-center">
            <h1 className="text-6xl font-extrabold tracking-tighter">
              HeyðŸ‘‹ I'm Farhaan!
            </h1>
            <p className="mt-8 font-medium text-xl max-w-2xl">
              Wave at me on the Ethereum blockchain! Maybe send a message too?
              Connect your wallet, write your message, and then wave ðŸ‘‹.
            </p>
            {!currentAccount ? (
              <button
                className="w-64 mt-16 bg-[#171717] font-medium text-white rounded-md py-3"
                onClick={connectWallet}
              >
                Connect Wallet
              </button>
            ) : (
              <form
                onSubmit={(e) => {
                  e.preventDefault();
                  wave(message);
                  setMessage("");
                }}
                className="flex flex-col gap-8 w-full max-w-lg mt-10"
              >
                <textarea
                  className="resize-none w-full h-64 rounded-md bg-white border-black/20 border p-4 placeholder:text-lg"
                  placeholder="Enter your message"
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  required
                ></textarea>
                <button
                  className="w-full bg-[#171717] font-medium text-white rounded-md py-3.5"
                  type="submit"
                >
                  Wave at Me!
                </button>
              </form>
            )}
          </div>
          <div className="flex flex-col w-full max-w-3xl mt-16">
            <h2 className="text-4xl font-extrabold tracking-tight">
              Wave log ðŸ‘€
            </h2>
            <div className="mt-6 flex flex-col gap-6">
              {allWaves.map(
                ({ address, timestamp, message }: WaveInfo, index: number) => (
                  <WaveInfo
                    key={index}
                    address={address}
                    timestamp={timestamp}
                    message={message}
                  />
                )
              )}
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}
